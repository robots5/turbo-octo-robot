Dilworth's theorem or Minimum path cover
Let us have a directed graph and we need to find minimal count of path, that cover all graph i.e. each vertex belong to some path only one item.
This problem can be solved by MaxFlow's algorithms.
But if we have n vertex and each other vertex is connected then we need O(n^2) memory, and worst time for any algorithm take place >= n^2.
https://en.wikipedia.org/wiki/Minimum_path_cover


Dilworth's theorem privide us (https://en.wikipedia.org/wiki/Dilworth%27s_theorem) the great sultion of this problem!

First of all we have to find maximum vertexes subset, where any of two vertex dont't have the edge between them.
Answer is a count of the number vertex in subset.
That's all.


Problem: https://www.hackerrank.com/contests/oct13/challenges/missile-defend
Tutorial: https://www.hackerrank.com/blog/oct-2020-editorial-hackerx
Solution:
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main()
{
	int n;
	cin >> n;
	vector<pair<int,int> > v(n);
	int a,b;
	for (int i = 0; i < n; i++)
	{
		scanf ("%d%d",&a,&b);
		v[i] = make_pair(a - b,a + b);
	}
	sort (v.begin(),v.end());
	vector<int> vb(n),d(n,1000000);
	d[0] = -10000000;
	for (int i = 0; i < n; i++)
		vb[i] = v[n - i - 1].second;
	int ans = 0;
	//find longest increasing subseq log by e-maxx.ru/algo
	for (int i=0; i<n; i++) {
		int j = int (upper_bound (d.begin(), d.end(), vb[i]) - d.begin());
		if (d[j-1] < vb[i] && vb[i] < d[j])
			d[j] = vb[i],ans = max (ans,j);
	}
	cout<< ans;
}